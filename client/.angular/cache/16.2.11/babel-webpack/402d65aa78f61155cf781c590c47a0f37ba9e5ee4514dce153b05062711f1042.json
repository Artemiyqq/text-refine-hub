{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/text-refine-hub/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport { TextDTO } from '../models/text-dto.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.textApiUrl = `${environment.apiUrl}/Text`;\n    this.docxApiUrl = `${environment.apiUrl}/Docx`;\n  }\n  postPastedText(text) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const textDto = new TextDTO(text);\n      try {\n        const result = yield lastValueFrom(_this.http.post(_this.textApiUrl, textDto, {\n          responseType: 'text'\n        }));\n        return result;\n      } catch (error) {\n        console.error('Error while trying to get processed text: ', error);\n        throw error;\n      }\n    })();\n  }\n  postDocxFile(file) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const formData = new FormData();\n        formData.append('file', file, file.name);\n        const result = yield lastValueFrom(_this2.http.post(_this2.docxApiUrl, formData, {\n          responseType: 'text'\n        }));\n        return result;\n      } catch (error) {\n        console.log('Error in processing docx', error);\n        throw error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","lastValueFrom","TextDTO","ApiService","constructor","http","textApiUrl","apiUrl","docxApiUrl","postPastedText","text","_this","_asyncToGenerator","textDto","result","post","responseType","error","console","postDocxFile","file","_this2","formData","FormData","append","name","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\text-refine-hub\\client\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport { TextDTO } from '../models/text-dto.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private textApiUrl = `${environment.apiUrl}/Text`\n  private docxApiUrl = `${environment.apiUrl}/Docx`\n\n  constructor(private http: HttpClient) { }\n\n  async postPastedText(text: string): Promise<string> {\n    const textDto: TextDTO = new TextDTO(text);\n    try {\n      const result = await lastValueFrom(this.http.post(this.textApiUrl, textDto, { responseType: 'text' }));\n      return result as string;\n    } catch (error) {\n      console.error('Error while trying to get processed text: ', error)\n      throw error;\n    }\n  }\n\n  async postDocxFile(file: File): Promise<string> {\n    try {\n      const formData: FormData = new FormData();\n      formData.append('file', file, file.name);\n\n      const result = await lastValueFrom(this.http.post(this.docxApiUrl, formData, { responseType: 'text' }));\n      return result as string;\n    } catch (error) {\n      console.log('Error in processing docx', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,aAAa,QAAQ,MAAM;AACpC,SAASC,OAAO,QAAQ,0BAA0B;;;AAKlD,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,UAAU,GAAG,GAAGN,WAAW,CAACO,MAAM,OAAO;IACzC,KAAAC,UAAU,GAAG,GAAGR,WAAW,CAACO,MAAM,OAAO;EAET;EAElCE,cAAcA,CAACC,IAAY;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC/B,MAAMC,OAAO,GAAY,IAAIX,OAAO,CAACQ,IAAI,CAAC;MAC1C,IAAI;QACF,MAAMI,MAAM,SAASb,aAAa,CAACU,KAAI,CAACN,IAAI,CAACU,IAAI,CAACJ,KAAI,CAACL,UAAU,EAAEO,OAAO,EAAE;UAAEG,YAAY,EAAE;QAAM,CAAE,CAAC,CAAC;QACtG,OAAOF,MAAgB;OACxB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;QAClE,MAAMA,KAAK;;IACZ;EACH;EAEME,YAAYA,CAACC,IAAU;IAAA,IAAAC,MAAA;IAAA,OAAAT,iBAAA;MAC3B,IAAI;QACF,MAAMU,QAAQ,GAAa,IAAIC,QAAQ,EAAE;QACzCD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,EAAEA,IAAI,CAACK,IAAI,CAAC;QAExC,MAAMX,MAAM,SAASb,aAAa,CAACoB,MAAI,CAAChB,IAAI,CAACU,IAAI,CAACM,MAAI,CAACb,UAAU,EAAEc,QAAQ,EAAE;UAAEN,YAAY,EAAE;QAAM,CAAE,CAAC,CAAC;QACvG,OAAOF,MAAgB;OACxB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACQ,GAAG,CAAC,0BAA0B,EAAET,KAAK,CAAC;QAC9C,MAAMA,KAAK;;IACZ;EACH;EAAC,QAAAU,CAAA,G;qBA5BUxB,UAAU,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV7B,UAAU;IAAA8B,OAAA,EAAV9B,UAAU,CAAA+B,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}