{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/text-refine-hub/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nim;\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.textApiUrl = `http://localhost:5171/api/Text`;\n    this.docxApiUrl = `${environment.apiUrl}/Docx`;\n  }\n  postPastedText(text) {\n    const payload = {\n      text: text\n    }; // Ensure the payload is an object with the 'text' property\n    return this.http.post(this.textApiUrl, payload, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  postDocxFile(file) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n        const result = yield lastValueFrom(_this.http.post(`${_this.docxApiUrl}/docx`, formData));\n        return result;\n      } catch (error) {\n        console.log('Error in processing docx', error);\n        throw error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","lastValueFrom","im","ApiService","constructor","http","textApiUrl","docxApiUrl","apiUrl","postPastedText","text","payload","post","headers","postDocxFile","file","_this","_asyncToGenerator","formData","FormData","append","result","error","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\text-refine-hub\\client\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { lastValueFrom } from 'rxjs';\nim\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private textApiUrl = `http://localhost:5171/api/Text`\n  private docxApiUrl = `${environment.apiUrl}/Docx`\n\n  constructor(private http: HttpClient) { }\n\n  postPastedText(text: string): Observable<any> {\n    const payload = { text: text }; // Ensure the payload is an object with the 'text' property\n    return this.http.post<any>(this.textApiUrl, payload, { headers: { 'Content-Type': 'application/json' } });\n  }\n\n  async postDocxFile(file: File): Promise<string> {\n    try {\n      const formData: FormData = new FormData();\n      formData.append('file', file);\n\n      const result = await lastValueFrom(this.http.post<string>(`${this.docxApiUrl}/docx`, formData));\n      return result;\n    } catch (error) {\n      console.log('Error in processing docx', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,aAAa,QAAQ,MAAM;;;AACpCC,EAAE;AAKF,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,UAAU,GAAG,gCAAgC;IAC7C,KAAAC,UAAU,GAAG,GAAGP,WAAW,CAACQ,MAAM,OAAO;EAET;EAExCC,cAAcA,CAACC,IAAY;IACzB,MAAMC,OAAO,GAAG;MAAED,IAAI,EAAEA;IAAI,CAAE,CAAC,CAAC;IAChC,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAAM,IAAI,CAACN,UAAU,EAAEK,OAAO,EAAE;MAAEE,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CAAC;EAC3G;EAEMC,YAAYA,CAACC,IAAU;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAa,IAAIC,QAAQ,EAAE;QACzCD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;QAE7B,MAAMM,MAAM,SAASpB,aAAa,CAACe,KAAI,CAACX,IAAI,CAACO,IAAI,CAAS,GAAGI,KAAI,CAACT,UAAU,OAAO,EAAEW,QAAQ,CAAC,CAAC;QAC/F,OAAOG,MAAM;OACd,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,KAAK,CAAC;QAC9C,MAAMA,KAAK;;IACZ;EACH;EAAC,QAAAG,CAAA,G;qBAtBUtB,UAAU,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV3B,UAAU;IAAA4B,OAAA,EAAV5B,UAAU,CAAA6B,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}